package com.springboot.blogapp.controller;


import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.blogapp.payload.PostDto;
import com.springboot.blogapp.payload.PostDtoV2;
import com.springboot.blogapp.payload.PostResponse;
import com.springboot.blogapp.service.PostService;
import com.springboot.blogapp.utils.AppConstants;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/posts")
public class PostController {

	private PostService postService;

	public PostController(PostService postService) {
		this.postService = postService;
	}
	
	
	@PreAuthorize("hasRole('ADMIN')")
	@PostMapping
	public ResponseEntity<PostDto> createPost(@Valid @RequestBody PostDto postDto){
		
		return new ResponseEntity<PostDto>(postService.createPost(postDto), HttpStatus.CREATED);
	}
	
	
	@GetMapping
	public PostResponse getAllPosts(
			@RequestParam(value = "pageSize", defaultValue = AppConstants.DEFAULT_PAGE_SIZE, required = false) int pageSize,
			@RequestParam(value = "pageNo", defaultValue = AppConstants.DEFAULT_PAGE_NUMBER, required = false) int pageNo,
			@RequestParam(value = "sortBy", defaultValue = AppConstants.DEFAULT_SORT_BY, required = false) String sortBy,
			@RequestParam(value = "sortDir", defaultValue = AppConstants.DEFAULT_SORT_DIRECTION, required = false) String sortDir
			){
		return postService.getAllPost(pageSize, pageNo, sortBy, sortDir);
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<PostDto> getPostByIdV1(@PathVariable long id){
		return ResponseEntity.ok(postService.getPostById(id));
	}
	
	
	@GetMapping("/{id}")
	public ResponseEntity<PostDto> getPostByIdV2(@PathVariable long id){
		PostDto postDto =postService.getPostById(id);
		
		PostDtoV2 postDtoV2 = new PostDtoV2();
		postDtoV2.setTitle(postDto.getTitle());
		postDtoV2.setContent(postDto.getContent());
		postDtoV2.setDescription(postDto.getDescription());
		postDtoV2.setCategoryId(postDto.getCategoryId());
		
		List<String> tags = new ArrayList<>();
		tags.add("java");
		tags.add("spring");
		
		postDtoV2.setTags(tags);
		return ResponseEntity.ok(postService.getPostById(id));
	}
	
	
	@PreAuthorize("hasRole('ADMIN')")
	@PutMapping("/{id}")
	public ResponseEntity<PostDto> updatePost(
			@PathVariable long id,@Valid @RequestBody PostDto postDto
			){
		
		return ResponseEntity.ok(postService.updatePost(id, postDto));
		
	}
	
	
	@PreAuthorize("hasRole('ADMIN')")
	@DeleteMapping("/{id}")
	public ResponseEntity<String> deletePost(@PathVariable long id){
		
		postService.deletePostById(id);
		return new ResponseEntity<String>("Post entity delete sucessfuly", HttpStatus.OK);
	}
	
	
	@GetMapping("/category/{id}")
	public ResponseEntity<List<PostDto>> getPostsByCategory(@PathVariable long id){
		List<PostDto> posts = postService.getPostByCategory(id);
		return ResponseEntity.ok(posts);
	}
}



